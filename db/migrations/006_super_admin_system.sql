-- ============================================================================
-- Migration: Super Admin System
-- ============================================================================
-- This migration adds super admin capabilities for managing organizations
-- Super admins can create organizations and assign initial admin users
-- ============================================================================

BEGIN;

-- ----------------------------------------------------------------------------
-- Add Super Admin Flag to Users Table
-- ----------------------------------------------------------------------------
-- Add a flag to identify super admins (admins of the software, not org admins)
ALTER TABLE users ADD COLUMN IF NOT EXISTS is_super_admin BOOLEAN DEFAULT false;

CREATE INDEX idx_users_super_admin ON users(is_super_admin) WHERE is_super_admin = true;

COMMENT ON COLUMN users.is_super_admin IS 'Super admin - can manage all organizations. Different from organization admins.';

-- ----------------------------------------------------------------------------
-- Update Organizations Table
-- ----------------------------------------------------------------------------
-- Add plan/subscription fields if they don't exist
ALTER TABLE organizations ADD COLUMN IF NOT EXISTS subscription_plan VARCHAR(50) DEFAULT 'free';
ALTER TABLE organizations ADD COLUMN IF NOT EXISTS subscription_status VARCHAR(50) DEFAULT 'active';
ALTER TABLE organizations ADD COLUMN IF NOT EXISTS trial_ends_at TIMESTAMPTZ;
ALTER TABLE organizations ADD COLUMN IF NOT EXISTS subscription_ends_at TIMESTAMPTZ;
ALTER TABLE organizations ADD COLUMN IF NOT EXISTS features JSONB DEFAULT '{}'::jsonb;

-- Add user limits
ALTER TABLE organizations ADD COLUMN IF NOT EXISTS max_users INTEGER DEFAULT 5;
ALTER TABLE organizations ADD COLUMN IF NOT EXISTS current_users INTEGER DEFAULT 0;

CREATE INDEX idx_organizations_subscription ON organizations(subscription_plan, subscription_status);
CREATE INDEX idx_organizations_active_subs ON organizations(is_active, subscription_status) WHERE is_active = true;

-- ----------------------------------------------------------------------------
-- Function: Create Organization with Admin User
-- ----------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION create_organization_with_admin(
  p_org_name VARCHAR(255),
  p_org_slug VARCHAR(255),
  p_org_code VARCHAR(50),
  p_admin_email VARCHAR(255),
  p_admin_first_name VARCHAR(100),
  p_admin_last_name VARCHAR(100),
  p_admin_password VARCHAR(255),
  p_subscription_plan VARCHAR(50) DEFAULT 'free'
)
RETURNS JSONB AS $$
DECLARE
  v_org_id UUID;
  v_user_id UUID;
  v_result JSONB;
BEGIN
  -- Check if organization slug already exists
  IF EXISTS (SELECT 1 FROM organizations WHERE slug = p_org_slug) THEN
    RETURN jsonb_build_object(
      'success', false,
      'error', 'Organization slug already exists'
    );
  END IF;
  
  -- Check if email already exists
  IF EXISTS (SELECT 1 FROM users WHERE email = p_admin_email) THEN
    RETURN jsonb_build_object(
      'success', false,
      'error', 'Email already registered'
    );
  END IF;
  
  -- Create organization
  INSERT INTO organizations (
    name,
    slug,
    code,
    subscription_plan,
    subscription_status,
    is_active
  ) VALUES (
    p_org_name,
    p_org_slug,
    p_org_code,
    p_subscription_plan,
    'active',
    true
  )
  RETURNING id INTO v_org_id;
  
  -- Create admin user (password hash should be generated by your auth system)
  -- For now, storing as plain text (you should hash this!)
  INSERT INTO users (
    organization_id,
    email,
    password_hash,
    first_name,
    last_name,
    role,
    is_active,
    email_verified
  ) VALUES (
    v_org_id,
    p_admin_email,
    p_admin_password, -- ⚠️ TODO: Hash this password!
    p_admin_first_name,
    p_admin_last_name,
    'owner',
    true,
    true
  )
  RETURNING id INTO v_user_id;
  
  -- Update organization user count
  UPDATE organizations 
  SET current_users = 1
  WHERE id = v_org_id;
  
  RETURN jsonb_build_object(
    'success', true,
    'organization_id', v_org_id,
    'admin_user_id', v_user_id
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

COMMENT ON FUNCTION create_organization_with_admin IS 'Create a new organization with an initial admin user. Only callable by super admins.';

-- ----------------------------------------------------------------------------
-- Function: Update Organization Subscription
-- ----------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION update_organization_subscription(
  p_org_id UUID,
  p_subscription_plan VARCHAR(50),
  p_max_users INTEGER
)
RETURNS JSONB AS $$
BEGIN
  UPDATE organizations
  SET 
    subscription_plan = p_subscription_plan,
    max_users = p_max_users
  WHERE id = p_org_id;
  
  RETURN jsonb_build_object(
    'success', true,
    'organization_id', p_org_id
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ----------------------------------------------------------------------------
-- Function: Get All Organizations (Super Admin View)
-- ----------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION get_all_organizations()
RETURNS TABLE (
  id UUID,
  name VARCHAR(255),
  slug VARCHAR(255),
  code VARCHAR(50),
  subscription_plan VARCHAR(50),
  subscription_status VARCHAR(50),
  is_active BOOLEAN,
  current_users INTEGER,
  max_users INTEGER,
  created_at TIMESTAMPTZ,
  user_count BIGINT,
  owner_email VARCHAR(255)
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    o.id,
    o.name,
    o.slug,
    o.code,
    o.subscription_plan,
    o.subscription_status,
    o.is_active,
    o.current_users,
    o.max_users,
    o.created_at,
    COUNT(u.id) as user_count,
    STRING_AGG(
      DISTINCT CASE WHEN u.role = 'owner' THEN u.email END, 
      ', '
    ) as owner_email
  FROM organizations o
  LEFT JOIN users u ON o.id = u.organization_id
  GROUP BY o.id, o.name, o.slug, o.code, o.subscription_plan, 
           o.subscription_status, o.is_active, o.current_users, 
           o.max_users, o.created_at
  ORDER BY o.created_at DESC;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ----------------------------------------------------------------------------
-- Function: Toggle Organization Status
-- ----------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION toggle_organization_status(
  p_org_id UUID
)
RETURNS JSONB AS $$
DECLARE
  v_new_status BOOLEAN;
BEGIN
  -- Toggle the status
  UPDATE organizations
  SET is_active = NOT is_active
  WHERE id = p_org_id
  RETURNING is_active INTO v_new_status;
  
  RETURN jsonb_build_object(
    'success', true,
    'is_active', v_new_status
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ----------------------------------------------------------------------------
-- Seed Initial Super Admin
-- ----------------------------------------------------------------------------
-- This creates the first super admin user
-- You should change the email and password hash after first login!
DO $$
DECLARE
  v_org_id UUID;
  v_super_admin_id UUID;
BEGIN
  -- Create a special "System" organization for super admins
  INSERT INTO organizations (name, slug, code, is_active)
  VALUES ('System', 'system', 'SYS', false)
  ON CONFLICT DO NOTHING
  RETURNING id INTO v_org_id;
  
  IF v_org_id IS NULL THEN
    SELECT id INTO v_org_id FROM organizations WHERE slug = 'system';
  END IF;
  
  -- Create super admin user (change email and password!)
  INSERT INTO users (
    organization_id,
    email,
    password_hash,
    first_name,
    last_name,
    role,
    is_super_admin,
    is_active,
    email_verified
  ) VALUES (
    v_org_id,
    'admin@system.com',  -- ⚠️ CHANGE THIS EMAIL!
    'CHANGE_THIS_PASSWORD_HASH',  -- ⚠️ CHANGE THIS!
    'Super',
    'Admin',
    'owner',
    true,
    true,
    true
  )
  ON CONFLICT (email) DO NOTHING;
  
  RAISE NOTICE 'Super admin created: admin@system.com';
  RAISE NOTICE '⚠️  CHANGE THE EMAIL AND PASSWORD AFTER FIRST LOGIN!';
END $$;

COMMIT;
