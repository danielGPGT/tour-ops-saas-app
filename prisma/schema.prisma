// Prisma schema aligned with initial PostgreSQL DDL
// Note: For brevity, we model core relations and rely on `db push` for initial sync.
// Some CHECK constraints and partial indexes are not directly expressible in Prisma
// and should be applied via SQL migrations if needed.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model organizations {
  id         BigInt @id @default(autoincrement())
  name       String
  settings   Json   @default("{}")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  suppliers           suppliers[]
  products            products[]
  product_variants    product_variants[]
  product_types       product_types[]
  product_subtypes    product_subtypes[]
  contracts           contracts[]
  contract_versions   contract_versions[]
  rate_plans          rate_plans[]
  rate_seasons        rate_seasons[]
  rate_occupancies    rate_occupancies[]
  rate_age_bands      rate_age_bands[]
  rate_adjustments    rate_adjustments[]
  rate_taxes_fees     rate_taxes_fees[]
  allocation_buckets  allocation_buckets[]
  allocation_holds    allocation_holds[]
  packages            packages[]
  package_components  package_components[]
  product_addons      product_addons[]
  bookings            bookings[]
  booking_items       booking_items[]
  booking_item_addons booking_item_addons[]
  passengers          passengers[]
  payment_schedules   payment_schedules[]
  payments            payments[]
  supplier_payments   supplier_payments[]
  agents              agents[]
  agent_commissions   agent_commissions[]
  commission_payments commission_payments[]
  fulfillment_tasks   fulfillment_tasks[]
  inventory_pools     inventory_pools[]
  room_assignments    room_assignments[]
  room_occupants      room_occupants[]
  org_settings        org_settings?
  time_slots          time_slots[]
}

model suppliers {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  name       String
  terms      Json   @default("{}")
  channels   String[]
  status     String  @default("active")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  contracts     contracts[]
  rate_plans    rate_plans[]
  allocation_buckets allocation_buckets[]
  booking_items booking_items[]
  inventory_pools inventory_pools[]
}

model product_types {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  name       String
  description String?
  icon       String?
  color      String?
  is_default Boolean @default(false)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  product_subtypes product_subtypes[]
  products products[]
}

model product_subtypes {
  id             BigInt @id @default(autoincrement())
  org_id         BigInt
  product_type_id BigInt
  name           String
  description    String?
  icon           String?
  is_default     Boolean @default(false)
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  updated_at     DateTime @default(now()) @db.Timestamptz(6)

  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  product_types product_types @relation(fields: [product_type_id], references: [id], onDelete: Cascade)
  product_variants product_variants[]

  @@unique([org_id, product_type_id, name])
}

model products {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  name       String
  type       String // Keep for backward compatibility during transition
  product_type_id BigInt? // New relationship
  status     String @default("active")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  product_types product_types? @relation(fields: [product_type_id], references: [id], onDelete: Restrict)
  product_variants product_variants[]
}

model product_variants {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  product_id BigInt
  name       String
  subtype    String // Keep for backward compatibility during transition
  product_subtype_id BigInt? // New relationship
  attributes Json   @default("{}")
  status     String @default("active")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  product_subtypes product_subtypes? @relation(fields: [product_subtype_id], references: [id], onDelete: Restrict)

  rate_plans rate_plans[]
  allocation_buckets allocation_buckets[]
  time_slots time_slots[]

  package_components package_components[]
  product_addons product_addons[]
  booking_items booking_items[]

  @@unique([org_id, product_id, name])
}

model time_slots {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  product_variant_id BigInt
  slot_time  String  // Time as string (e.g., "14:00")
  slot_name  String?
  duration_minutes Int?
  is_active  Boolean @default(true)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  product_variants product_variants @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
  
  allocation_buckets allocation_buckets[]

  @@unique([org_id, product_variant_id, slot_time])
}

model contracts {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  supplier_id BigInt
  reference  String
  status     String @default("active")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  suppliers suppliers @relation(fields: [supplier_id], references: [id], onDelete: Restrict)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  contract_versions contract_versions[]
}

model contract_versions {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  contract_id BigInt
  valid_from DateTime @db.Date
  valid_to   DateTime @db.Date
  cancellation_policy Json @default("{}")
  payment_policy Json @default("{}")
  terms      Json @default("{}")
  supersedes_id BigInt?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  contracts contracts @relation(fields: [contract_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  rate_plans rate_plans[]

  prev_version contract_versions? @relation("ContractVersionChain", fields: [supersedes_id], references: [id])
  next_versions contract_versions[] @relation("ContractVersionChain")
}

model rate_plans {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  product_variant_id BigInt
  supplier_id BigInt
  contract_version_id BigInt
  inventory_model String
  currency   String
  markets    String[]
  channels   String[]
  preferred  Boolean @default(false)
  valid_from DateTime @db.Date
  valid_to   DateTime @db.Date
  rate_doc   Json @default("{}")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  product_variants product_variants @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
  suppliers suppliers @relation(fields: [supplier_id], references: [id], onDelete: Restrict)
  contract_versions contract_versions @relation(fields: [contract_version_id], references: [id], onDelete: Restrict)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)

  rate_seasons rate_seasons[]
  rate_occupancies rate_occupancies[]
  rate_age_bands rate_age_bands[]
  rate_adjustments rate_adjustments[]
  rate_taxes_fees rate_taxes_fees[]
}

model rate_seasons {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  rate_plan_id BigInt
  season_from DateTime @db.Date
  season_to   DateTime @db.Date
  dow_mask    Int @default(127)
  min_stay    Int?
  max_stay    Int?
  min_pax     Int?
  max_pax     Int?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  rate_plans rate_plans @relation(fields: [rate_plan_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model rate_occupancies {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  rate_plan_id BigInt
  min_occupancy Int
  max_occupancy Int
  pricing_model String
  base_amount Decimal @db.Decimal(12, 2)
  per_person_amount Decimal? @db.Decimal(12, 2)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  rate_plans rate_plans @relation(fields: [rate_plan_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model rate_age_bands {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  rate_plan_id BigInt
  label      String
  min_age    Int
  max_age    Int
  price_type String
  value      Decimal @db.Decimal(12, 4)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  rate_plans rate_plans @relation(fields: [rate_plan_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model rate_adjustments {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  rate_plan_id BigInt
  scope      String
  condition  Json @default("{}")
  adjustment_type String
  value      Decimal @db.Decimal(12, 4)
  priority   Int @default(100)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  rate_plans rate_plans @relation(fields: [rate_plan_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model rate_taxes_fees {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  rate_plan_id BigInt
  name       String
  jurisdiction String?
  inclusive  Boolean @default(false)
  calc_base  String
  amount_type String
  value      Decimal @db.Decimal(12, 4)
  rounding_rule String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  rate_plans rate_plans @relation(fields: [rate_plan_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model allocation_buckets {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  product_variant_id BigInt
  supplier_id BigInt
  date       DateTime? @db.Date  // Made nullable for events
  event_start_date DateTime? @db.Date  // For event inventory
  event_end_date DateTime? @db.Date    // For event inventory
  allocation_type String
  quantity   Int?
  booked     Int @default(0)
  held       Int @default(0)
  release_period_hours Int?
  stop_sell  Boolean @default(false)
  blackout   Boolean @default(false)
  slot_id    BigInt?  // Now properly references time_slots
  inventory_pool_id BigInt?
  allow_overbooking Boolean @default(false)
  overbooking_limit Int?
  notes      String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  product_variants product_variants @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
  suppliers suppliers @relation(fields: [supplier_id], references: [id], onDelete: Restrict)
  time_slots time_slots? @relation(fields: [slot_id], references: [id], onDelete: Cascade)
  inventory_pools inventory_pools? @relation(fields: [inventory_pool_id], references: [id], onDelete: Cascade)

  allocation_holds allocation_holds[]
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model allocation_holds {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  allocation_bucket_id BigInt
  quantity   Int
  expires_at DateTime @db.Timestamptz(6)
  booking_ref String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  allocation_buckets allocation_buckets @relation(fields: [allocation_bucket_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model packages {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  name       String
  description String?
  pricing_mode String
  status     String @default("active")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  package_components package_components[]
}

model package_components {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  package_id BigInt
  product_variant_id BigInt
  sequence   Int
  quantity   Int @default(1)
  pricing_overrides Json @default("{}")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  packages packages @relation(fields: [package_id], references: [id], onDelete: Cascade)
  product_variants product_variants @relation(fields: [product_variant_id], references: [id], onDelete: Restrict)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model product_addons {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  product_variant_id BigInt
  name       String
  price_type String
  amount     Decimal @db.Decimal(12, 2)
  taxable    Boolean @default(true)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  product_variants product_variants @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  booking_item_addons booking_item_addons[]
}

model bookings {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  reference  String
  channel    String
  status     String
  total_cost Decimal @default(0) @db.Decimal(14, 2)
  total_price Decimal @default(0) @db.Decimal(14, 2)
  total_margin Decimal @default(0) @db.Decimal(14, 2)
  currency   String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  booking_items booking_items[]
  passengers passengers[]
  payment_schedules payment_schedules[]
  agent_commissions agent_commissions[]

  @@unique([org_id, reference])
}

model booking_items {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  booking_id BigInt
  product_variant_id BigInt
  supplier_id BigInt?
  state      String
  service_start DateTime @db.Timestamptz(6)
  service_end DateTime?
  quantity   Int @default(1)
  pax_breakdown Json @default("{}")
  unit_cost  Decimal @default(0) @db.Decimal(12, 2)
  unit_price Decimal @default(0) @db.Decimal(12, 2)
  margin     Decimal @default(0) @db.Decimal(12, 2)
  product_variant_name String
  supplier_name String?
  rate_plan_code String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  bookings  bookings @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  product_variants product_variants @relation(fields: [product_variant_id], references: [id], onDelete: Restrict)
  suppliers suppliers? @relation(fields: [supplier_id], references: [id], onDelete: SetNull)
  booking_item_addons booking_item_addons[]
  supplier_payments supplier_payments[]
  fulfillment_tasks fulfillment_tasks[]
  room_assignments room_assignments[]
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model booking_item_addons {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  booking_item_id BigInt
  addon_id   BigInt?
  quantity   Int @default(1)
  amount     Decimal @db.Decimal(12, 2)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  booking_items booking_items @relation(fields: [booking_item_id], references: [id], onDelete: Cascade)
  product_addons product_addons? @relation(fields: [addon_id], references: [id], onDelete: SetNull)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model passengers {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  booking_id BigInt
  full_name  String
  dob        DateTime? @db.Date
  age        Int?
  gender     String?
  passport   String?
  nationality String?
  dietary    String?
  medical    String?
  is_lead    Boolean @default(false)
  assignment Json @default("{}")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  bookings bookings @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  room_occupants room_occupants[]
}

model payment_schedules {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  booking_id BigInt
  type       String
  amount     Decimal @db.Decimal(12, 2)
  due_at     DateTime @db.Timestamptz(6)
  status     String @default("pending")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  bookings bookings @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  payments payments[]
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model payments {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  payment_schedule_id BigInt
  amount     Decimal @db.Decimal(12, 2)
  received_at DateTime @db.Timestamptz(6)
  method     String
  status     String
  reference  String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  payment_schedules payment_schedules @relation(fields: [payment_schedule_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model supplier_payments {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  booking_item_id BigInt
  amount     Decimal @db.Decimal(12, 2)
  due_at     DateTime @db.Timestamptz(6)
  status     String @default("pending")
  invoice_ref String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  booking_items booking_items @relation(fields: [booking_item_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model agents {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  name       String
  terms      Json @default("{}")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  commission_payments commission_payments[]
}

model agent_commissions {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  booking_id BigInt
  basis      String
  rate       Decimal @db.Decimal(6, 4)
  amount     Decimal @db.Decimal(12, 2)
  status     String @default("pending")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  bookings bookings @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model commission_payments {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  agent_id   BigInt
  amount     Decimal @db.Decimal(12, 2)
  paid_at    DateTime @db.Timestamptz(6)
  reference  String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  agents agents @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

model fulfillment_tasks {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  booking_item_id BigInt
  type       String
  payload    Json @default("{}")
  due_at     DateTime?
  status     String @default("pending")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  booking_items booking_items @relation(fields: [booking_item_id], references: [id], onDelete: Cascade)
  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}

// Enhanced Hotel Inventory Management Models
model inventory_pools {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  supplier_id BigInt
  name       String
  description String?
  pool_type  String @default("shared")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  suppliers suppliers @relation(fields: [supplier_id], references: [id], onDelete: Restrict)
  allocation_buckets allocation_buckets[]

  @@unique([org_id, supplier_id, name])
}

model room_assignments {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  booking_item_id BigInt
  room_number String?
  room_type  String
  bedding_preference String?
  floor_preference String?
  adjacent_to BigInt?
  status     String @default("requested")
  special_requests String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  booking_items booking_items @relation(fields: [booking_item_id], references: [id], onDelete: Cascade)
  adjacent_room room_assignments? @relation("AdjacentRooms", fields: [adjacent_to], references: [id])
  adjacent_rooms room_assignments[] @relation("AdjacentRooms")
  room_occupants room_occupants[]
}

model room_occupants {
  id         BigInt @id @default(autoincrement())
  org_id     BigInt
  room_assignment_id BigInt
  passenger_id BigInt
  is_lead    Boolean @default(false)
  created_at DateTime @default(now()) @db.Timestamptz(6)

  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
  room_assignments room_assignments @relation(fields: [room_assignment_id], references: [id], onDelete: Cascade)
  passengers passengers @relation(fields: [passenger_id], references: [id], onDelete: Cascade)

  @@unique([room_assignment_id, passenger_id])
}

model product_templates {
  id         BigInt @id @default(autoincrement())
  name       String @unique
  description String
  product_type String
  template_data Json @default("{}")
  is_default Boolean @default(false)
  created_at DateTime @default(now()) @db.Timestamptz(6)
}

model org_settings {
  org_id     BigInt @id
  settings   Json @default("{}")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  organizations organizations @relation(fields: [org_id], references: [id], onDelete: Cascade)
}


